{"ast":null,"code":"import { renderSlot as _renderSlot, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-85dec040\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = [\"id\"];\nconst _hoisted_2 = {\n  key: 0,\n  class: \"dropdown-list\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Item = _resolveComponent(\"Item\");\n\n  return _openBlock(), _createElementBlock(\"div\", {\n    id: $props.id,\n    class: \"dropdown\"\n  }, [_createElementVNode(\"button\", {\n    class: _normalizeClass([\"btn\", {\n      isActive: $data.isOpen\n    }]),\n    onClick: _cache[0] || (_cache[0] = $event => $data.isOpen = !$data.isOpen)\n  }, [_renderSlot(_ctx.$slots, \"default\", {}, undefined, true)], 2\n  /* CLASS */\n  ), $data.isOpen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.arrays, (item, index) => {\n    return _openBlock(), _createBlock(_component_Item, {\n      key: index,\n      item: item,\n      closeDropdown: $options.callToClose,\n      onChangeValue: $options.changeValue\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(item.text), 1\n      /* TEXT */\n      )]),\n      _: 2\n      /* DYNAMIC */\n\n    }, 1032\n    /* PROPS, DYNAMIC_SLOTS */\n    , [\"item\", \"closeDropdown\", \"onChangeValue\"]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])) : _createCommentVNode(\"v-if\", true)], 8\n  /* PROPS */\n  , _hoisted_1);\n}","map":{"version":3,"mappings":";;;;;;;EAKSA,KAAK,EAAC;;;;;uBAJbC,oBAeM,KAfN,EAeM;IAfAC,EAAE,EAAEC,SAeJ;IAfQH,KAAK,EAAC;EAed,CAfN,GACEI,oBAES,QAFT,EAES;IAFDJ,KAAK,mBAAC,KAAD,EAAM;MAAAK,UAA+CC;IAA/C,CAAN,EAEJ;IAFYC,OAAK,sCAAED,eAAM,CAAIA,YAAZ;EAEjB,CAFT,GACEE,YAAQC,WAAR,EAAQ,SAAR,EAAQ,EAAR,EAAQC,SAAR,EAAQ,IAAR,EADF;;EAAA,GAGiCJ,8BAAjCL,oBAUM,KAVN,cAUM,oBATJA,oBAQOU,SARP,EAQO,IARP,EAQOC,YAPmBT,aAOnB,EAPyB,CAAtBU,IAAsB,EAAhBC,KAAgB,KAAX;yBADrBC,aAQOC,eARP,EAQO;MANJC,GAAG,EAAEH,KAMD;MALJD,IAAI,EAAEA,IAKF;MAJJK,aAAa,EAAEC,oBAIX;MAHJC,aAAW,EAAED;IAGT,CARP;wBAOE,MAAe,mCAAZN,IAAI,CAACQ,OAAI;MAAA;OAAG;;;;KAPjB;;IAAA;GAQO,CARP;;EAAA,CASI,EAVN,uCAJF;;EAAA","names":["class","_createElementBlock","id","$props","_createElementVNode","isActive","$data","onClick","_renderSlot","_ctx","undefined","_Fragment","_renderList","item","index","_createBlock","_component_Item","key","closeDropdown","$options","onChangeValue","text"],"sourceRoot":"","sources":["/home/dlinh/Documents/BaseProject/base-project/src/components/Dropdown/DropdownBase.vue"],"sourcesContent":["<template>\n  <div :id=\"id\" class=\"dropdown\">\n    <button class=\"btn\" @click=\"isOpen = !isOpen\" :class=\"{ isActive: isOpen }\">\n      <slot />\n    </button>\n    <div class=\"dropdown-list\" v-if=\"isOpen\">\n      <Item\n        v-for=\"(item, index) in arrays\"\n        :key=\"index\"\n        :item=\"item\"\n        :closeDropdown=\"callToClose\"\n        @changeValue=\"changeValue\"\n      >\n        {{ item.text }}\n      </Item>\n    </div>\n  </div>\n</template>\n<script>\nimport Item from \"./ItemDropdown.vue\";\nexport default {\n  name: \"DropdownBase\",\n  components: {\n    Item,\n  },\n  data() {\n    return {\n      isOpen: false,\n      isActive: false,\n      valueChecked: 1,\n    };\n  },\n  created() {\n    window.addEventListener(\"click\", this.checkClickOn);\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"click\", this.checkClickOn);\n  },\n  props: {\n    arrays: {\n      type: Array,\n      default: () => [],\n    },\n    id: {\n      type: String,\n      required: true,\n    },\n  },\n  methods: {\n    callToClose() {\n      this.isOpen = false;\n    },\n    changeValue(value) {\n      this.valueChecked = value;\n      for (let i = 0; i < array.length; index++) {\n        const element = array[index];\n        \n      }\n      console.log(this.isActive);\n    },\n    checkClickOn(event) {\n      if (!document.getElementById(this.id).contains(event.target)) {\n        this.isOpen = false;\n      }\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n// .btn\nbutton {\n  position: relative;\n  padding: 10px 20px;\n  background-color: #747a81;\n  border: 1px solid #747a81;\n  cursor: pointer;\n  transition: 0.3s;\n  height: 3rem;\n  border: 1px solid transparent;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border-radius: 0.2rem;\n  margin-right: 20px;\n  color: #fff;\n  font-weight: 900;\n  opacity: 0.6;\n\n  &:focus {\n    outline: 0px;\n  }\n\n  &:hover {\n    opacity: 1;\n    cursor: pointer;\n  }\n\n  &.isActive {\n    opacity: 1;\n    cursor: pointer;\n  }\n}\n\n.dropdown {\n  position: relative;\n  width: fit-content;\n\n  &-list {\n    background: white;\n    margin-top: 5px;\n    position: absolute;\n    z-index: 10;\n    width: 100%;\n    border: 1px solid black;\n    border-radius: 4px;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}
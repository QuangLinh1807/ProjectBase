{"ast":null,"code":"import config from \"/config\";\nimport { authHeader } from \"../helpers\";\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  };\n  return fetch(`${config.apiUrl}/users/authenticate`, requestOptions).then(handleResponse).then(user => {\n    // login thành công nếu có một token jwt trong response\n    if (user.token) {\n      // lưu dữ liệu user và token jwt vào local storage để giữ user được log in trong page\n      localStorage.setItem(\"user\", JSON.stringify(user));\n    }\n\n    return user;\n  });\n}\n\nfunction logout() {\n  // xoá user từ local storage để log out\n  localStorage.removeItem(\"user\");\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`${config.apiUrl}/users/register`, requestOptions).then(handleResponse);\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`${config.apiUrl}/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(),\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`${config.apiUrl}/users/${user.id}`, requestOptions).then(handleResponse);\n}\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader()\n  };\n  return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // tự động logout nếu response 401 được trả về từ api\n        logout();\n        location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"names":["config","authHeader","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","apiUrl","then","handleResponse","user","token","localStorage","setItem","removeItem","id","response","text","data","parse","ok","status","location","reload","error","message","statusText","Promise","reject"],"sources":["/home/dlinh/Documents/BaseProject/base-project/src/services/user.service.js"],"sourcesContent":["import config from \"/config\";\nimport { authHeader } from \"../helpers\";\n\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete,\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ username, password }),\n  };\n\n  return fetch(`${config.apiUrl}/users/authenticate`, requestOptions)\n    .then(handleResponse)\n    .then((user) => {\n      // login thành công nếu có một token jwt trong response\n      if (user.token) {\n        // lưu dữ liệu user và token jwt vào local storage để giữ user được log in trong page\n        localStorage.setItem(\"user\", JSON.stringify(user));\n      }\n\n      return user;\n    });\n}\n\nfunction logout() {\n  // xoá user từ local storage để log out\n  localStorage.removeItem(\"user\");\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(user),\n  };\n\n  return fetch(`${config.apiUrl}/users/register`, requestOptions).then(\n    handleResponse\n  );\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${config.apiUrl}/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(\n    handleResponse\n  );\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(), \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(user),\n  };\n\n  return fetch(`${config.apiUrl}/users/${user.id}`, requestOptions).then(\n    handleResponse\n  );\n}\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(\n    handleResponse\n  );\n}\n\nfunction handleResponse(response) {\n  return response.text().then((text) => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // tự động logout nếu response 401 được trả về từ api\n        logout();\n        location.reload(true);\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}